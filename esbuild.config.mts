import fs from "fs";
import path from "path";
import builtins from "builtin-modules";
import chokidar from "chokidar";
import esbuild from "esbuild";
import process from "process";

const VAULT_DIR = "/Users/tadashi-aikawa/work/minerva";
const FILES = ["main.js", "manifest.json", "styles.css"];

// ---

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();

  const pluginDir = path.join(
    VAULT_DIR,
    ".obsidian/plugins/obsidian-another-quick-switcher",
  );

  console.log(`📁 Creating ${pluginDir} (if not existed)`);
  fs.mkdirSync(pluginDir, { recursive: true });

  const hotreloadPath = path.join(pluginDir, ".hotreload", "");
  console.log(`🌶 Creating a ${hotreloadPath}`);
  fs.writeFileSync(hotreloadPath, "");

  const watcher = chokidar.watch(FILES, { usePolling: true });
  watcher
    .on("add", (p) => {
      console.log(`♨  ${p} is added`);
      fs.copyFileSync(p, path.join(pluginDir, p));
    })
    .on("change", (p) => {
      console.log(`♨  ${p} is changed`);
      fs.copyFileSync(p, path.join(pluginDir, p));
    });
}
